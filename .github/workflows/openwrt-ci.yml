#
# This is free software, lisence use MIT.
# 
# Copyright (C) 2019 P3TERX <https://p3terx.com>
# Copyright (C) 2020 KFERMercer <KFER.Mercer@gmail.com>
# 
# <https://github.com/KFERMercer/OpenWrt-CI>
#

name: OpenWrt-CI

on:
  # push:
  #   branches: 
  #     - master
  # schedule:
  #   - cron: 0 20 * * *
  workflow_dispatch: 
  release:
    types: [published]

jobs:

  build_openwrt:

    name: Build OpenWrt firmware

    runs-on: ubuntu-18.04

    if: github.event.repository.owner.id == github.event.sender.id

    steps:

      - name: Space cleanup
        env:
          DEBIAN_FRONTEND: noninteractive
        run: |
          docker rmi `docker images -q`
          sudo rm -rf /usr/share/dotnet /etc/mysql /etc/php /etc/apt/sources.list.d
          sudo -E apt-get -y purge azure-cli ghc* zulu* hhvm llvm* firefox google* dotnet* powershell openjdk* mysql* php* android*
          sudo -E apt-get update
          sudo -E apt-get -y install build-essential asciidoc binutils bzip2 gawk gettext git libncurses5-dev libz-dev patch python3 unzip zlib1g-dev lib32gcc1 libc6-dev-i386 subversion flex uglifyjs gcc-multilib g++-multilib p7zip p7zip-full msmtp libssl-dev texinfo libglib2.0-dev xmlto qemu-utils upx libelf-dev autoconf automake libtool autopoint device-tree-compiler antlr3 gperf swig
          sudo -E apt-get -y autoremove --purge
          sudo -E apt-get clean

          df -h
      
      - name: Clone Code
        run: |
          git clone --depth=1 https://github.com/coolsnowwolf/lede.git /opt/lede
          cd /opt/lede

      - name: Update feeds
        run: |
          sed -i 's/#src-git helloworld/src-git helloworld/g' /opt/lede/feeds.conf.default
          
          cd /opt/lede
          ./scripts/feeds update -a
          ./scripts/feeds install -a
          
          git clone --depth=1 https://github.com/vernesong/OpenClash.git
          mv OpenClash/luci-app-openclash /opt/lede/package/lean/
          rm -rf OpenClash

          cd /opt/lede/package/lean/
          
          # 京东签到相关
          git clone --depth=1 https://github.com/jerrykuku/luci-app-jd-dailybonus.git
          
          # Adguard Home
          # git clone --depth=1 https://github.com/rufengsuixing/luci-app-adguardhome.git
          git clone --depth=1 https://github.com/kongfl888/luci-app-adguardhome.git
          
          # Docker
          git clone --depth=1 https://github.com/lisaac/luci-app-dockerman.git
          
          # 主题
          rm -rf luci-theme-argon
          git clone --depth=1 -b 18.06 https://github.com/jerrykuku/luci-theme-argon.git
          git clone --depth=1 https://github.com/jerrykuku/luci-app-argon-config.git
          
          # 微信推送
          git clone --depth=1 https://github.com/tty228/luci-app-serverchan.git

      - name: Generate configuration file
        run: |
          cd /opt/lede
          rm -f ./.config*
          touch /opt/lede/.config

          #
          # 在 cat >> .config <<EOF 到 EOF 之间粘贴你的编译配置, 需注意缩进关系
          # 例如:

          cat >> .config <<EOF
          
          CONFIG_TARGET_IMAGES_GZIP=y
          CONFIG_TARGET_KERNEL_PARTSIZE=16
          CONFIG_TARGET_ROOTFS_PARTSIZE=300
          CONFIG_TARGET_x86=y
          CONFIG_TARGET_x86_64=y
          CONFIG_TARGET_x86_64_Generic=y
          CONFIG_EFI_IMAGES=y
          CONFIG_PACKAGE_ipv6helper=y
          CONFIG_PACKAGE_ca-bundle=y
          CONFIG_PACKAGE_dnsmasq_full_dhcpv6=y
          CONFIG_PACKAGE_nft-qos=y
          CONFIG_PACKAGE_qos-scripts=y
          CONFIG_PACKAGE_sqm-scripts=y
          CONFIG_PACKAGE_sqm-scripts-extra=y
          CONFIG_PACKAGE_netdata=y
          CONFIG_PACKAGE_kmod-fs-btrfs=y
          CONFIG_PACKAGE_kmod-fs-nfs=y
          CONFIG_PACKAGE_kmod-fs-nfs-common=y
          CONFIG_PACKAGE_kmod-fs-nfs-common-rpcsec=y
          CONFIG_PACKAGE_kmod-fs-nfs-v4=y
          CONFIG_PACKAGE_kmod-fs-ntfs=y
          CONFIG_PACKAGE_kmod-fs-squashfs=y
          CONFIG_PACKAGE_kmod-usb-ehci=y
          CONFIG_PACKAGE_kmod-usb-ohci=y
          CONFIG_PACKAGE_kmod-usb-ohci-pci=y
          CONFIG_PACKAGE_kmod-usb-printer=y
          CONFIG_PACKAGE_kmod-usb2=y
          CONFIG_PACKAGE_kmod-usb2-pci=y
          CONFIG_PACKAGE_kmod-usb3=y
          CONFIG_PACKAGE_amd64-microcode=y
          CONFIG_PACKAGE_intel-microcode=y
          CONFIG_PACKAGE_aircard-pcmcia-firmware=y
          
          CONFIG_PACKAGE_open-vm-tools=y
          CONFIG_PACKAGE_open-vm-tools-fuse=y
          CONFIG_PACKAGE_CONFIG_TARGET_IMAGES_PAD=y
          CONFIG_PACKAGE_CONFIG_VMDK_IMAGES=y
          
          CONFIG_PACKAGE_luci-app-adguardhome=y
          CONFIG_PACKAGE_luci-app-ahcp=y
          CONFIG_PACKAGE_luci-app-amule=y
          CONFIG_PACKAGE_luci-app-diskman=y
          CONFIG_PACKAGE_luci-app-dockerman=y
          CONFIG_PACKAGE_luci-app-frpc=y
          CONFIG_PACKAGE_luci-app-guest-wifi=y
          CONFIG_PACKAGE_luci-app-hd-idle=y
          CONFIG_PACKAGE_luci-app-jd-dailybonus=y
          CONFIG_PACKAGE_luci-app-minidlna=y
          CONFIG_PACKAGE_luci-app-mwan3=y
          CONFIG_PACKAGE_luci-app-mwan3helper=y
          CONFIG_PACKAGE_luci-app-netdata=y
          CONFIG_PACKAGE_luci-app-nft-qos=y
          CONFIG_PACKAGE_luci-app-ntpc=y
          CONFIG_PACKAGE_luci-app-openvpn=y
          CONFIG_PACKAGE_luci-app-openvpn-server=y
          CONFIG_PACKAGE_luci-app-qbittorrent=y
          CONFIG_PACKAGE_luci-app-qos=y
          CONFIG_PACKAGE_luci-app-rclone=y
          CONFIG_PACKAGE_luci-app-sqm=y
          CONFIG_PACKAGE_luci-app-syncdial=y
          CONFIG_PACKAGE_luci-app-ttyd=y
          CONFIG_PACKAGE_luci-app-usb-printer=y
          CONFIG_DEFAULT_luci-app-ssr-plus=y
          CONFIG_PACKAGE_luci-app-v2ray-server=y
          CONFIG_PACKAGE_luci-app-vnstat=y
          CONFIG_PACKAGE_luci-app-wireguard=y
          # CONFIG_PACKAGE_luci-app-xlnetacc is not set
          CONFIG_PACKAGE_luci-app-openclash=y
          CONFIG_PACKAGE_luci-app-serverchan=y
          
          
          CONFIG_PACKAGE_luci-theme-argon=y
          CONFIG_PACKAGE_luci-app-argon-config=y
          
          CONFIG_PACKAGE_luci-proto-ipv6=y
          CONFIG_PACKAGE_luci-proto-wireguard=y
          CONFIG_PACKAGE_luci-lib-docker=y
          CONFIG_PACKAGE_luci-lib-json=y
          
          CONFIG_PACKAGE_curl=y
          CONFIG_PACKAGE_htop=y
          CONFIG_PACKAGE_nano=y
          CONFIG_PACKAGE_screen=y
          CONFIG_PACKAGE_wget=y
          CONFIG_PACKAGE_vim-fuller=y

          EOF

          #
          # ===============================================================
          # 

          sed -i 's/^[ \t]*//g' /opt/lede/.config
          make defconfig

      - name: Make download
        run: |
          cd /opt/lede
          make download -j8 || make download -j1 V=s
          rm -rf $(find /opt/lede/dl/ -size -1024c)
          df -h

      - name: Compile firmware
        run: |
          cd /opt/lede
          make -j$(nproc) || make -j1 V=s
          echo "======================="
          echo "Space usage:"
          echo "======================="
          df -h
          echo "======================="
          du -h /opt/lede/ --max-depth=1
          du -h /mnt/openwrt/ --max-depth=1 || true

      - name: Prepare artifact
        run: |
          mkdir -p /opt/lede/artifact/firmware
          mkdir -p /opt/lede/artifact/package
          mkdir -p /opt/lede/artifact/buildinfo
          rm -rf $(find /opt/lede/bin/targets/ -type d -name "packages")
          cp -rf $(find /opt/lede/bin/targets/ -type f) /opt/lede/artifact/firmware/
          cp -rf $(find /opt/lede/bin/packages/ -type f -name "*.ipk") /opt/lede/artifact/package/
          cp -rf $(find /opt/lede/bin/targets/ -type f -name "*.buildinfo" -o -name "*.manifest") /opt/lede/artifact/buildinfo/

      - name: Deliver buildinfo
        uses: actions/upload-artifact@v2
        with:
          name: OpenWrt_buildinfo
          path: /opt/lede/artifact/buildinfo/

      - name: Deliver package
        uses: actions/upload-artifact@v2
        with:
          name: OpenWrt_package
          path: /opt/lede/artifact/package/

      - name: Deliver firmware
        uses: actions/upload-artifact@v2
        with:
          name: OpenWrt_firmware
          path: /opt/lede/bin/targets/

      - name: Upload release asset
        if: github.event == 'release'
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.YOURTOKEN }}
          file: /opt/lede/artifact/firmware/*
          tag: ${{ github.ref }}
          file_glob: true
